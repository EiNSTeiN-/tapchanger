[gcode_macro PAUSE_PRINT_IF_TOOL_MOUNTED]
gcode:
  {% if printer.tool_probe_endstop.active_tool_number != -1 %}
    RESPOND TYPE=error MSG='{params.MESSAGE}  {printer.tool_probe_endstop.active_tool_number}'
    M84 ; Motors off
    PAUSE
  {% endif %}

[gcode_macro PAUSE_PRINT_IF_TOOL_NOT_MOUNTED]
gcode:
  {% if printer.tool_probe_endstop.active_tool_number == -1 %}
    RESPOND TYPE=error MSG='{params.MESSAGE} {printer.tool_probe_endstop.active_tool_number}'
    M84 ; Motors off
    PAUSE    
  {% endif %}


[gcode_macro T_DROPOFF_APPROACH]
description: Approach the dropoff location X=nnn Y=nnn Z=nnn YS=nnn
gcode:
  G91
  G0 Z5               ; Move 5 mm up to avoid crashing into things
  G90         
  #   ##############  Move in to zone  ##############
  G0 Y{params.YS} F8000                                          # Fast move Y to zone. 
  G0 X{params.X} Z{params.Z|float+50} F8000                     # Fast move XZ to zone.
  #   ##############  Into the dock  ##############
  G0 Y{params.Y|float+6+3} Z{params.Z|float+50} F5000    # Over
  G0 Y{params.Y|float+6+3} Z{params.Z|float+42+3} F5000    ## Lower down
  G0 Y{params.Y|float+6} Z{params.Z|float+42} F1000        # Into the dock, diagonal
  G0 Y{params.Y|float} Z{params.Z|float+42} F500          # Into the dock, horizontal

[gcode_macro T_DROPOFF_DO]
description: Perform the dropoff move X=nnn Y=nnn Z=nnn YS=nnn
gcode:
  G90         
  #   ############## Detach ##############
  G0 Z{params.Z|float-1.0} F2000                                  # All the way down
  #   ############## Out and about ##############
  G0 Y{params.YS} F5000                                          # Fast move Y to zone. 

[gcode_macro T_PICKUP_APPROACH]
description: Approach the pickup location X=nnn Y=nnn Z=nnn YS=nnn
gcode:
  G90
  G0 Y{params.YS} F8000                                          # Fast move Y to zone. 
  G0 X{params.X} Z{params.Z|float-1} F10000                       # Fast move XZ in front of parking spot. 
  G0 Y{params.Y|float+2} F10000                                  # Initial Y aproach
  G0 Y{params.Y} F1000                                          # Fine Y aproach

[gcode_macro T_PICKUP_DO]
description: Perform the main pickup move X=nnn Y=nnn Z=nnn YS=nnn
gcode:
  G90
  #   ##############  Lift up ##############
  G0 Z{params.Z|float+10} F500                                  # Slow initial raise
  G0 Z{params.Z|float+42} F1500                                          # Faster remaining raise.

  M400                                # Wait for current moves to finish
  DETECT_ACTIVE_TOOL_PROBE
  PAUSE_PRINT_IF_TOOL_NOT_MOUNTED MESSAGE='Failed to mount the tool'
  
  #   ############## Over and away ##############
  G0 Y{params.Y|float+6} F1000        # Back out of the dock
  G0 Y{params.Y|float+6+3} Z{params.Z|float+42+3} F2000        # Diagonal
  G0 Y{params.Y|float+6+3} Z{params.Z|float+50} F2000          # Over
  G0 Y{params.YS} F10000                                       # Out to the zone
  G0 Z180 F3000                                                # Move down to avoid crashing in the tools.


[gcode_macro M104]
rename_existing: M104.1
description: [T<index>] [S<temperature>]
  Set tool temperature.
  T= Tool number, optional. If this parameter is not provided, the current tool is used.
  S= Active temperature(s), optional
gcode:
  {% set newparameters = "" %}  # Parameters to be passed to subroutines in new format.

  # T= Tool number
  {% if params.T is defined %}
    {% set newparameters = newparameters ~ " TOOL="~params.T %}                   # Set heater_standby_temp to new parameters.
  {% endif %}

  # S= Active temperature
  {% if params.S is defined %}
    {% set newparameters = newparameters ~ " ACTV_TMP="~params.S %}               # Set heater_active_temp to new parameters.
  {% endif %}

  SET_TOOL_TEMPERATURE{newparameters}


[gcode_macro M106]
variable_fan_speed: 0
description: Snnn Pnnn
  Set fan speed. A tool and toollock must be configured for this to work.
  S: Fan speed 0-1 or 2-255 (optional, defult 1, full speed)
  P: Tool (optional, defaults to the currently selected tool)
  The P parameter specifies tool instead of fan number as in RRF.
gcode:
  {% set newparameters = "" %}  # Parameters to be passed to subroutines in new format.

  # S= Fan speed 0-1 or 2-255 (optional, defult 1, full speed)
  {% if params.S is defined %}
    {% set newparameters = newparameters ~ " S="~params.S %}                   # Set heater_standby_temp to new parameters.
  {% endif %}

  # P= Tool number
  {% if params.P is defined %}
    {% set newparameters = newparameters ~ " P="~params.P %}                   # Set heater_standby_temp to new parameters.
  {% endif %}
  SET_AND_SAVE_FAN_SPEED{newparameters}

[gcode_macro M107]
description: Pnnn
  Turn off fan.
  P = Tool (optional and defaults to the currently selected tool)
gcode:       
  {% if params.P is defined %}
    {% set p = " P"~params.P %}
  {% endif %}
  M106 {p|default("")} S0

[gcode_macro G10]
description: See M568. Passtrough to M568.
gcode:
  M568 {rawparams}


[gcode_macro M109]
rename_existing: M109.1
description: [T<index>] S<temperature> W<Tolerance>]
  Waits for all temperatures, or a specified tool or heater's temperature.
  This command can be used without any additional parameters.
  Without parameters it waits for bed and current extruder.
  Tnnn Tool number.
  Snnn Temperature
  Wnnn Tolerance in degC. Defaults to 1*C. Wait will wait until heater is between set temperature +/- tolerance.
gcode:
  {% set newparameters = "" %}  # Parameters to be passed to subroutine in new format.
  {% if params.T is defined %}
    {% set newparameters = newparameters ~ " TOOL=" ~ params.T %}                   # Set Tool to new parameters.
  {% endif %}
  {% if params.S is defined %}
    {% set newTempParameters = "" %}  # Parameters to be passed to subroutines in new format.
  
    # P= Tool number
    {% if params.T is defined %}
      {% set newTempParameters = newTempParameters ~ " TOOL="~params.T %}                   # Set heater_standby_temp to new parameters.
    {% endif %}
  
    # S= Active temperature
    {% if params.S is defined %}
      {% set newTempParameters = newTempParameters ~ " ACTV_TMP="~params.S %}                    # Set heater_active_temp to new parameters.
    {% endif %}
    SET_TOOL_TEMPERATURE{newTempParameters}
  {% endif %}
  {% if params.W is defined %}
    {% set newparameters = newparameters ~ " TOLERANCE=" ~ params.W %}                   # Set Tolerance to new parameters.
  {% else %}
    {% set newparameters = newparameters ~ " TOLERANCE=2" %}                             # Set Tolerance to default of 2.
  {% endif %}
  TEMPERATURE_WAIT_WITH_TOLERANCE{newparameters}

[gcode_macro M568]
description: Pnnn Rnnn Snnn An Nnnn Mnnn
  Set tool temperature.
  P= Tool number, optional. If this parameter is not provided, the current tool is used.
  R= Standby temperature(s), optional
  S= Active temperature(s), optional
  A = Heater State, optional: 0 = off, 1 = standby temperature(s), 2 = active temperature(s).
  N = Time in seconds to wait between changing heater state to standby and setting heater target temperature to standby temperature when standby temperature is lower than tool temperature.
      Use for example 0.1 to change immediately to standby temperature.
  O = Time in seconds to wait from docking tool to shutting off the heater, optional.
      Use for example 86400 to wait 24h if you want to disable shutdown timer.
gcode:
#  RESPOND MSG="M568: Seting new temperature: {rawparams}"
  {% set newparameters = "" %}  # Parameters to be passed to subroutines in new format.

  # P= Tool number
  {% if params.P is defined %}
    {% set newparameters = newparameters ~ " TOOL="~params.P %}                   # Set heater_standby_temp to new parameters.
  {% endif %}

  # R= Standby temperature
  {% if params.R is defined %}
    {% set newparameters = newparameters ~ " STDB_TMP="~params.R %}                   # Set heater_standby_temp to new parameters.
  {% endif %}

  # S= Active temperature
  {% if params.S is defined %}
    {% set newparameters = newparameters ~ " ACTV_TMP="~params.S %}                    # Set heater_active_temp to new parameters.
  {% endif %}

  # N = Time in seconds to wait from docking tool to putting the heater in standy
  {% if params.N is defined %}
    {% set newparameters = newparameters ~ " STDB_TIMEOUT="~params.N %}                  # Set idle_to_standby_time to new parameters.
  {% endif %}

  # M = Time in seconds to wait from docking tool to shuting off the heater
  {% if params.O is defined %}
    {% set newparameters = newparameters ~ " SHTDWN_TIMEOUT="~params.O %}                  # Set idle_to_powerdown_time to new parameters.
  {% endif %}

  # A = Heater State, optional: 0 = off, 1 = standby temperature(s), 2 = active temperature
  {% if params.A is defined %}
    {% set newparameters = newparameters ~ " CHNG_STATE="~params.A %}                            # Set idle_to_powerdown_time to new parameters.
  {% endif %}

#  {action_respond_info("M568: Running: SET_TOOL_TEMPERATURE"~newparameters)}
  SET_TOOL_TEMPERATURE{newparameters}
